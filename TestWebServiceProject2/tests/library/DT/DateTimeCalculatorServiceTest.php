<?php
require_once 'DT/DateTimeCalculator.php';
require_once 'DT/DateTimeCalculatorService.php';
require_once 'DT/DateTimeCalculatorParams.php';
require_once 'DT/DateTimeCalculatorException.php';
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-06-12 at 00:03:41.
 */
class DT_DateTimeCalculatorServiceTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var DT_DateTimeCalculatorService
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DT_DateTimeCalculatorService;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00") == 365 // days without timezones.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfDaysBetweenTwoMoments
     */
    public function testGetNoOfDaysBetweenTwoMoments()
    {
        $this->assertEquals(
          365 // days without timezones
,
          $this->object->getNoOfDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "second") == 31536000.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfDaysBetweenTwoMoments
     */
    public function testGetNoOfDaysBetweenTwoMoments2()
    {
        $this->assertEquals(
          31536000
,
          $this->object->getNoOfDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "second")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "minute") == 525600.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfDaysBetweenTwoMoments
     */
    public function testGetNoOfDaysBetweenTwoMoments3()
    {
        $this->assertEquals(
          525600
,
          $this->object->getNoOfDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "minute")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "hour") == 8760.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfDaysBetweenTwoMoments
     */
    public function testGetNoOfDaysBetweenTwoMoments4()
    {
        $this->assertEquals(
          8760
,
          $this->object->getNoOfDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "hour")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "year") == 1.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfDaysBetweenTwoMoments
     */
    public function testGetNoOfDaysBetweenTwoMoments5()
    {
        $this->assertEquals(
          1
,
          $this->object->getNoOfDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "year")
        );
    }

    /**
     * Generated from @assert ("2013-02-28 00:00:00", "2013-03-01 00:00:00") == 1 //leap year support.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfDaysBetweenTwoMoments
     */
    public function testGetNoOfDaysBetweenTwoMoments6()
    {
        $this->assertEquals(
          1 //leap year support
,
          $this->object->getNoOfDaysBetweenTwoMoments("2013-02-28 00:00:00", "2013-03-01 00:00:00")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Australia/Adelaide", "Asia/Colombo", null) == 365.21 // days with timezones.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfDaysBetweenTwoMoments
     */
    public function testGetNoOfDaysBetweenTwoMoments7()
    {
        $this->assertEquals(
          365.21 // days with timezones
,
          $this->object->getNoOfDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Australia/Adelaide", "Asia/Colombo", null)
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Australia/Adelaide", "Asia/Colombo", "second") == 31554000.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfDaysBetweenTwoMoments
     */
    public function testGetNoOfDaysBetweenTwoMoments8()
    {
        $this->assertEquals(
          31554000
,
          $this->object->getNoOfDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Australia/Adelaide", "Asia/Colombo", "second")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Australia/Adelaide", "Asia/Colombo", "minute") == 525900.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfDaysBetweenTwoMoments
     */
    public function testGetNoOfDaysBetweenTwoMoments9()
    {
        $this->assertEquals(
          525900
,
          $this->object->getNoOfDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Australia/Adelaide", "Asia/Colombo", "minute")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Australia/Adelaide", "Asia/Colombo", "hour") == 8765.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfDaysBetweenTwoMoments
     */
    public function testGetNoOfDaysBetweenTwoMoments10()
    {
        $this->assertEquals(
          8765
,
          $this->object->getNoOfDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Australia/Adelaide", "Asia/Colombo", "hour")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Australia/Adelaide", "Asia/Colombo", "year") == 1.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfDaysBetweenTwoMoments
     */
    public function testGetNoOfDaysBetweenTwoMoments11()
    {
        $this->assertEquals(
          1 
,
          $this->object->getNoOfDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Australia/Adelaide", "Asia/Colombo", "year")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Asia/Colombo", "Australia/Adelaide", null) == 364.79 // switch timezones.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfDaysBetweenTwoMoments
     */
    public function testGetNoOfDaysBetweenTwoMoments12()
    {
        $this->assertEquals(
          364.79 // switch timezones
,
          $this->object->getNoOfDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Asia/Colombo", "Australia/Adelaide", null)
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00") == 261 // week days without timezones.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfWeekDaysBetweenTwoMoments
     */
    public function testGetNoOfWeekDaysBetweenTwoMoments()
    {
        $this->assertEquals(
          261 // week days without timezones
,
          $this->object->getNoOfWeekDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "second") == 22550400.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfWeekDaysBetweenTwoMoments
     */
    public function testGetNoOfWeekDaysBetweenTwoMoments2()
    {
        $this->assertEquals(
          22550400
,
          $this->object->getNoOfWeekDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "second")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "minute") == 375840.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfWeekDaysBetweenTwoMoments
     */
    public function testGetNoOfWeekDaysBetweenTwoMoments3()
    {
        $this->assertEquals(
          375840
,
          $this->object->getNoOfWeekDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "minute")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "hour") == 6264.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfWeekDaysBetweenTwoMoments
     */
    public function testGetNoOfWeekDaysBetweenTwoMoments4()
    {
        $this->assertEquals(
          6264
,
          $this->object->getNoOfWeekDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "hour")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "year") == 0.71.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfWeekDaysBetweenTwoMoments
     */
    public function testGetNoOfWeekDaysBetweenTwoMoments5()
    {
        $this->assertEquals(
          0.71
,
          $this->object->getNoOfWeekDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "year")
        );
    }

    /**
     * Generated from @assert ("2013-02-28 00:00:00", "2013-03-01 00:00:00") == 1 //leap year support.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfWeekDaysBetweenTwoMoments
     */
    public function testGetNoOfWeekDaysBetweenTwoMoments6()
    {
        $this->assertEquals(
          1 //leap year support
,
          $this->object->getNoOfWeekDaysBetweenTwoMoments("2013-02-28 00:00:00", "2013-03-01 00:00:00")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", null) == 261.75 // week days with timezones.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfWeekDaysBetweenTwoMoments
     */
    public function testGetNoOfWeekDaysBetweenTwoMoments7()
    {
        $this->assertEquals(
          261.75 // week days with timezones
,
          $this->object->getNoOfWeekDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", null)
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "second") == 22615200.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfWeekDaysBetweenTwoMoments
     */
    public function testGetNoOfWeekDaysBetweenTwoMoments8()
    {
        $this->assertEquals(
          22615200
,
          $this->object->getNoOfWeekDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "second")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "minute") == 376920.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfWeekDaysBetweenTwoMoments
     */
    public function testGetNoOfWeekDaysBetweenTwoMoments9()
    {
        $this->assertEquals(
          376920
,
          $this->object->getNoOfWeekDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "minute")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "hour") == 6282.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfWeekDaysBetweenTwoMoments
     */
    public function testGetNoOfWeekDaysBetweenTwoMoments10()
    {
        $this->assertEquals(
          6282
,
          $this->object->getNoOfWeekDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "hour")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "year") == 0.72.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfWeekDaysBetweenTwoMoments
     */
    public function testGetNoOfWeekDaysBetweenTwoMoments11()
    {
        $this->assertEquals(
          0.72
,
          $this->object->getNoOfWeekDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "year")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "America/New_York", "Pacific/Auckland", null) == 260.25 // switch timezones.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfWeekDaysBetweenTwoMoments
     */
    public function testGetNoOfWeekDaysBetweenTwoMoments12()
    {
        $this->assertEquals(
          260.25 // switch timezones
,
          $this->object->getNoOfWeekDaysBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "America/New_York", "Pacific/Auckland", null)
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00") == 52 // complete weeks without timezones.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfCompleteWeeksBetweenTwoMoments
     */
    public function testGetNoOfCompleteWeeksBetweenTwoMoments()
    {
        $this->assertEquals(
          52 // complete weeks without timezones
,
          $this->object->getNoOfCompleteWeeksBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "second") == 31449600.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfCompleteWeeksBetweenTwoMoments
     */
    public function testGetNoOfCompleteWeeksBetweenTwoMoments2()
    {
        $this->assertEquals(
          31449600
,
          $this->object->getNoOfCompleteWeeksBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "second")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "minute") == 524160.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfCompleteWeeksBetweenTwoMoments
     */
    public function testGetNoOfCompleteWeeksBetweenTwoMoments3()
    {
        $this->assertEquals(
          524160
,
          $this->object->getNoOfCompleteWeeksBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "minute")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "hour") == 8736.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfCompleteWeeksBetweenTwoMoments
     */
    public function testGetNoOfCompleteWeeksBetweenTwoMoments4()
    {
        $this->assertEquals(
          8736
,
          $this->object->getNoOfCompleteWeeksBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "hour")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "year") == 1.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfCompleteWeeksBetweenTwoMoments
     */
    public function testGetNoOfCompleteWeeksBetweenTwoMoments5()
    {
        $this->assertEquals(
          1
,
          $this->object->getNoOfCompleteWeeksBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", null, null, "year")
        );
    }

    /**
     * Generated from @assert ("2013-02-28 00:00:00", "2013-03-01 00:00:00") == 0 //leap year support.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfCompleteWeeksBetweenTwoMoments
     */
    public function testGetNoOfCompleteWeeksBetweenTwoMoments6()
    {
        $this->assertEquals(
          0 //leap year support
,
          $this->object->getNoOfCompleteWeeksBetweenTwoMoments("2013-02-28 00:00:00", "2013-03-01 00:00:00")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", null) == 52 // complete weeks with timezones.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfCompleteWeeksBetweenTwoMoments
     */
    public function testGetNoOfCompleteWeeksBetweenTwoMoments7()
    {
        $this->assertEquals(
          52 // complete weeks with timezones
,
          $this->object->getNoOfCompleteWeeksBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", null)
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "second") == 31449600.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfCompleteWeeksBetweenTwoMoments
     */
    public function testGetNoOfCompleteWeeksBetweenTwoMoments8()
    {
        $this->assertEquals(
          31449600
,
          $this->object->getNoOfCompleteWeeksBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "second")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "minute") == 524160.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfCompleteWeeksBetweenTwoMoments
     */
    public function testGetNoOfCompleteWeeksBetweenTwoMoments9()
    {
        $this->assertEquals(
          524160
,
          $this->object->getNoOfCompleteWeeksBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "minute")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "hour") == 8736.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfCompleteWeeksBetweenTwoMoments
     */
    public function testGetNoOfCompleteWeeksBetweenTwoMoments10()
    {
        $this->assertEquals(
          8736
,
          $this->object->getNoOfCompleteWeeksBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "hour")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "year") == 1.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfCompleteWeeksBetweenTwoMoments
     */
    public function testGetNoOfCompleteWeeksBetweenTwoMoments11()
    {
        $this->assertEquals(
          1 
,
          $this->object->getNoOfCompleteWeeksBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "Pacific/Auckland", "America/New_York", "year")
        );
    }

    /**
     * Generated from @assert ("2013-01-01 00:00:00", "2014-01-01 00:00:00", "America/New_York", "Pacific/Auckland", null) == 52 // switch timezones.
     *
     * @covers DT_DateTimeCalculatorService::getNoOfCompleteWeeksBetweenTwoMoments
     */
    public function testGetNoOfCompleteWeeksBetweenTwoMoments12()
    {
        $this->assertEquals(
          52 // switch timezones
,
          $this->object->getNoOfCompleteWeeksBetweenTwoMoments("2013-01-01 00:00:00", "2014-01-01 00:00:00", "America/New_York", "Pacific/Auckland", null)
        );
    }
}
